trigger:
  - master
  - develop
pr:
  branches:
    include:
      - "*"

strategy:
  matrix:
    linux:
      imageName: "ubuntu-latest"
    windows:
      imageName: "windows-latest"

pool:
  vmImage: $(imageName)

steps:
  # - task: UseDotNet@2
  #   inputs:
  #     packageType: 'sdk'
  #     useGlobalJson: true
  - task: DotNetCoreCLI@2
    displayName: Restore
    inputs:
      command: "restore"
      verbosityRestore: "Normal"
  - task: DotNetCoreCLI@2
    displayName: Restore tools
    inputs:
      command: "custom"
      custom: "tool"
      arguments: "restore"
  - task: DotNetCoreCLI@2
    displayName: Build
    inputs:
      command: "build"
      arguments: "--configuration Release"
  - task: DotNetCoreCLI@2
    displayName: Run tests
    inputs:
      command: "test"
      arguments: "--configuration Release /p:AltCover=true /p:AltCoverForce=true /p:AltCoverCobertura=cobertura.xml"
  - task: DotNetCoreCLI@2
    displayName: Upload test coverage to codecov
    inputs:
      command: "custom"
      custom: "codecov"
      arguments: '-t $(codecov_token) -f src/*/coverage.xml --flag "azure-$(imageName)"'
  - task: PublishCodeCoverageResults@1
    displayName: Upload test coverage
    inputs:
      codeCoverageTool: 'Cobertura'
      summaryFileLocation: 'src/*.Tests/cobertura.xml'
      failIfCoverageEmpty: true
  - task: DotNetCoreCLI@2
    displayName: Dotnet publish
    inputs:
      command: 'publish'
      publishWebProjects: false
      projects: 'src\ModSink.UI.Avalonia\ModSink.UI.Avalonia.csproj'
      arguments: '-c Release -r win10-x64 --self-contained'
  - task: PublishBuildArtifacts@1
    displayName: Publish build artifact
    inputs:
      PathtoPublish: '$(Build.ArtifactStagingDirectory)'
      ArtifactName: 'drop'
      publishLocation: 'Container'